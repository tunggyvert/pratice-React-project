const express = require('express');
const bcrypt = require('bcryptjs');
const jwt = require('jsonwebtoken');
const User = require('../models/User');
const Room = require('../models/Room');
const Report = require('../models/Report');
const Contract = require('../models/Contract');
const qr = require('qrcode');
const qrcode = require('qrcode');
const promptpay = require('promptpay-qr');
const nodemailer = require('nodemailer');
const upload = require('../middleware/uploadMiddleware');
const MonthlyPayment = require('../models/MonthlyPayment');

const crypto = require('crypto');
const router = express.Router();
const ResetToken = require('../models/resetToken');
const authMiddleware = require('../middleware/authMiddleware');



// üîê Register
router.post('/register', async (req, res) => {
  const { firstName, lastName, email, tel,password } = req.body;

  try {
    const userExists = await User.findOne({ email });
    if (userExists) return res.status(400).json({ error: '‡∏°‡∏µ‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ‡πÅ‡∏•‡πâ‡∏ß' });

    const hashedPassword = await bcrypt.hash(password, 10);
    const newUser = new User({ firstName, lastName, email, tel,password: hashedPassword });
    await newUser.save();

    res.status(201).json({ message: '‡∏™‡∏°‡∏±‡∏Ñ‡∏£‡∏™‡∏°‡∏≤‡∏ä‡∏¥‡∏Å‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
  } catch (err) {
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î' });
  }
});

// üîë Login
// üîë Login
router.post('/login', async (req, res) => {
  const { email, password } = req.body;

  try {
    const user = await User.findOne({ email });
    if (!user) return res.status(400).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ' });

    const isMatch = await bcrypt.compare(password, user.password);
    if (!isMatch) return res.status(400).json({ error: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });

    const token = jwt.sign({ userId: user._id ,role: user.role}, 'secretkey', { expiresIn: '1h' });

    // ‚úÖ ‡∏™‡πà‡∏á‡∏Å‡∏•‡∏±‡∏ö user ‡∏î‡πâ‡∏ß‡∏¢ (‡πÅ‡∏ï‡πà‡∏Ñ‡∏ß‡∏£‡πÑ‡∏°‡πà‡∏£‡∏ß‡∏° password!)
    const { firstName, lastName, tel,email: userEmail,role } = user;

    res.json({
      token,
      user: { firstName, lastName, tel,email: userEmail,role }
    });

  } catch (err) {
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î' });
  }
});



// üîÅ Forgot Password
router.post('/forgot-password', async (req, res) => {
  const { email } = req.body;
  console.log('üì® ‡πÑ‡∏î‡πâ‡∏£‡∏±‡∏ö‡∏Ñ‡∏≥‡∏Ç‡∏≠‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô:', req.body.email);

  try {
    const user = await User.findOne({ email });
    if (!user) return res.status(400).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡∏ô‡∏µ‡πâ' });

    // üîÅ ‡∏™‡∏£‡πâ‡∏≤‡∏á token ‡πÅ‡∏ö‡∏ö random
    const token = crypto.randomBytes(32).toString('hex');

    // ‚ùå ‡∏•‡∏ö token ‡πÄ‡∏Å‡πà‡∏≤‡∏ñ‡πâ‡∏≤‡∏°‡∏µ
    await ResetToken.deleteMany({ userId: user._id });

    // ‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å token ‡πÉ‡∏´‡∏°‡πà
    const expiresAt = new Date(Date.now() + 15 * 60 * 1000); // 15 ‡∏ô‡∏≤‡∏ó‡∏µ
    await new ResetToken({ userId: user._id, token, expiresAt }).save();

    const resetLink = `http://localhost:5173/reset-password/${token}`;

    const transporter = nodemailer.createTransport({
      service: 'gmail',
      auth: {
        user: 'jakkapat.wut@gmail.com',
        pass: 'quaeyqqkgzwigfsg',
      },
    });

    const mailOptions = {
      from: '"Grove Residence" <jakkapat.wut@gmail.com>',
      to: email,
      subject: '‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì',
      html: `
        <h2>‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏î‡πâ‡∏Ç‡∏≠‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô</h2>
        <p>‡∏Ñ‡∏•‡∏¥‡∏Å‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡πÄ‡∏û‡∏∑‡πà‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì:</p>
        <a href="${resetLink}">${resetLink}</a>
        <p><small>‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏à‡∏∞‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÉ‡∏ô 15 ‡∏ô‡∏≤‡∏ó‡∏µ</small></p>
      `,
    };

    await transporter.sendMail(mailOptions, (err, info) => {
      if (err) {
        console.error('‚ùå ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏™‡πà‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•:', err);
      } else {
        console.log('‚úÖ ‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏ñ‡∏π‡∏Å‡∏™‡πà‡∏á‡πÅ‡∏•‡πâ‡∏ß:', info.response);
      }
    });
    console.log('‚úÖ Email sent to:', email);
    res.json({ message: '‡∏™‡πà‡∏á‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏≠‡∏µ‡πÄ‡∏°‡∏•‡∏Ç‡∏≠‡∏á‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏•‡πâ‡∏ß' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î' });
  }
});

// üîê Reset Password
router.post('/reset-password/:token', async (req, res) => {
  const { token } = req.params;
  const { newPassword } = req.body;

  try {
    const resetRecord = await ResetToken.findOne({ token });
    if (!resetRecord) return res.status(400).json({ error: '‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });

    if (resetRecord.expiresAt < new Date()) {
      await ResetToken.deleteOne({ _id: resetRecord._id });
      return res.status(400).json({ error: '‡∏•‡∏¥‡∏á‡∏Å‡πå‡∏´‡∏°‡∏î‡∏≠‡∏≤‡∏¢‡∏∏‡πÅ‡∏•‡πâ‡∏ß' });
    }

    const user = await User.findById(resetRecord.userId);
    if (!user) return res.status(400).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô' });

    const hashed = await bcrypt.hash(newPassword, 10);
    user.password = hashed;
    await user.save();

    // ‚úÖ ‡∏•‡∏ö token ‡∏ó‡∏¥‡πâ‡∏á‡∏´‡∏•‡∏±‡∏á‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô
    await ResetToken.deleteOne({ _id: resetRecord._id });

    res.json({ message: '‡∏£‡∏µ‡πÄ‡∏ã‡πá‡∏ï‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
  } catch (err) {
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î' });
  }
});

router.put('/update-profile', authMiddleware, async (req, res) => {
  console.log('üì• /update-profile called');
  const userId = req.user.userId;
  const { firstName, lastName, tel, currentPassword, newPassword } = req.body;

  const user = await User.findById(userId);

  // ‚úÖ ‡∏ñ‡πâ‡∏≤‡∏°‡∏µ‡∏Å‡∏≤‡∏£‡∏Ç‡∏≠‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™ ‡∏ï‡πâ‡∏≠‡∏á‡πÄ‡∏ä‡πá‡∏Å‡∏£‡∏´‡∏±‡∏™‡πÄ‡∏î‡∏¥‡∏°
  if (newPassword) {
    const isMatch = await bcrypt.compare(currentPassword, user.password);
    if (!isMatch) {
      return res.status(400).json({ error: '‡∏£‡∏´‡∏±‡∏™‡∏ú‡πà‡∏≤‡∏ô‡πÄ‡∏î‡∏¥‡∏°‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });
    }
    user.password = await bcrypt.hash(newPassword, 10);
  }

  user.firstName = firstName;
  user.lastName = lastName;
  user.tel = tel;

  const updatedUser = await user.save();

  const { password, ...userWithoutPassword } = updatedUser.toObject();

  res.json({ updatedUser: userWithoutPassword });
});

router.get('/users', authMiddleware, async (req, res) => {
  if (req.user.role !== 'admin') {
    return res.status(403).json({ error: 'Unauthorized' });
  }

  const users = await User.find().select('-password'); // ‡πÑ‡∏°‡πà‡∏™‡πà‡∏á‡∏£‡∏´‡∏±‡∏™
  res.json({ users });
});

router.put('/admin/update-password/:id', authMiddleware, async (req, res) => {
  const { role } = req.user;
  if (role !== 'admin') return res.status(403).json({ error: 'Unauthorized' });

  const { newPassword } = req.body;
  if (!newPassword) return res.status(400).json({ error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏£‡∏´‡∏±‡∏™‡πÉ‡∏´‡∏°‡πà' });

  const hashed = await bcrypt.hash(newPassword, 10);
  await User.findByIdAndUpdate(req.params.id, { password: hashed });

  res.json({ message: '‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏£‡∏´‡∏±‡∏™‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
});

router.delete('/admin/delete-user/:id', authMiddleware, async (req, res) => {
  if (req.user.role !== 'admin') return res.status(403).json({ error: 'Unauthorized' });

  try {
    await User.findByIdAndDelete(req.params.id);
    res.json({ message: '‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
  } catch (err) {
    console.error('‡∏•‡∏ö‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ‡∏•‡πâ‡∏°‡πÄ‡∏´‡∏•‡∏ß:', err);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö' });
  }
});

// GET ‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
router.get('/rooms', authMiddleware, async (req, res) => {
  try {
    const rooms = await Room.find();
    res.json(rooms);
  } catch (err) {
    res.status(500).json({ error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏î‡πâ' });
  }
});

// POST ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà
router.post('/rooms/add', authMiddleware, async (req, res) => {
  if (req.user.role !== 'admin') return res.status(403).json({ error: 'Unauthorized' });

  const {
    roomNumber,
    size,
    moveInDate = '1 ‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô, 2025',
    amenities
  } = req.body;

  const priceMap = {
    M: "7,000/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
    L: "7,500/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
    XL: "8,000/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"
  };

  const price = priceMap[size];
  if (!price) return res.status(400).json({ error: '‡∏Ç‡∏ô‡∏≤‡∏î‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á (M, L, XL)' });

  try {
    const newRoom = new Room({
      roomNumber,
      size,
      price,
      moveInDate,
      amenities
    });
    await newRoom.save();
    res.status(201).json({ message: '‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
});

// DELETE ‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á
router.delete('/rooms/:roomNumber', authMiddleware, async (req, res) => {
  if (req.user.role !== 'admin') return res.status(403).json({ error: 'Unauthorized' });

  try {
    const room = await Room.findOneAndDelete({ roomNumber: req.params.roomNumber });
    if (room) {
      // ‚úÖ ‡∏•‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏ä‡∏∑‡πà‡∏≠‡∏°‡∏Å‡∏±‡∏ö‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡∏î‡πâ‡∏ß‡∏¢
      await Contract.deleteMany({ room: room._id });
    }

    res.json({ message: '‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á‡πÅ‡∏•‡∏∞‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
  } catch (err) {
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á' });
  }
});


// ------------------------ REPORT ROUTES ------------------------

// GET ‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
router.get('/reports', authMiddleware, async (req, res) => {
  try {
    const reports = await Report.find().sort({ createdAt: -1 });
    res.json(reports);
  } catch (err) {
    res.status(500).json({ error: '‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
  }
});

// POST ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á
router.post('/reports/create', async (req, res) => {
  const { roomNumber, title, detail } = req.body;

  try {
    const report = new Report({ roomNumber, title, detail });
    await report.save();
    res.status(201).json({ message: '‡∏™‡πà‡∏á‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
  } catch (err) {
    res.status(400).json({ error: err.message });
  }
});

// GET ‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡πÄ‡∏â‡∏û‡∏≤‡∏∞‡∏´‡πâ‡∏≠‡∏á
router.get('/reports/:roomNumber', authMiddleware, async (req, res) => {
  try {
    const reports = await Report.find({ roomNumber: req.params.roomNumber });
    res.json(reports);
  } catch (err) {
    res.status(500).json({ error: '‡πÇ‡∏´‡∏•‡∏î‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
  }
});

// PUT ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á
router.put('/reports/status/:id', authMiddleware, async (req, res) => {
  const { status } = req.body;

  try {
    const updated = await Report.findByIdAndUpdate(req.params.id, { status }, { new: true });
    res.json(updated);
  } catch (err) {
    res.status(400).json({ error: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
  }
});

router.delete('/reports/:id', authMiddleware, async (req, res) => {
  if (req.user.role !== 'admin') return res.status(403).json({ error: 'Unauthorized' });
  try {
    await Report.findByIdAndDelete(req.params.id);
    res.json({ message: '‡∏•‡∏ö‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
  } catch (err) {
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏Ñ‡∏≥‡∏£‡πâ‡∏≠‡∏á' });
  }
});


// ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡πâ‡∏≠‡∏á (vacant ‚Üî occupied)
router.put('/rooms/status/:id', authMiddleware, async (req, res) => {
  if (req.user.role !== 'admin') return res.status(403).json({ error: 'Unauthorized' });

  const { status } = req.body;

  try {
    const updated = await Room.findByIdAndUpdate(req.params.id, { status }, { new: true });
    res.json(updated);
  } catch (err) {
    res.status(400).json({ error: '‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
  }
});


// ‚úÖ CREATE ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÉ‡∏´‡∏°‡πà
router.post('/create', authMiddleware, async (req, res) => {
  const userId = req.user.userId;
  const { roomId, startDate, monthlyRent, deposit } = req.body;

  try {
    const contract = new Contract({
      user: userId,
      room: roomId,
      startDate,
      monthlyRent,
      deposit
    });

    await contract.save();

    // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡πâ‡∏≠‡∏á‡πÄ‡∏õ‡πá‡∏ô occupied
    await Room.findByIdAndUpdate(roomId, { status: 'occupied' });

    res.status(201).json({ message: '‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÄ‡∏ä‡πà‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', contract });
  } catch (err) {
    console.error("üö® ‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡∏à‡∏≤‡∏Å backend:", err);
    res.status(400).json({ error: err.message });
  }
});

// ‚úÖ GET ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏Ç‡∏≠‡∏á‡∏ú‡∏π‡πâ‡πÉ‡∏ä‡πâ (‡∏î‡∏π‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á)
router.get('/me', authMiddleware, async (req, res) => {
  try {
    const contracts = await Contract.find({ user: req.user.userId })
      .populate('room', 'roomNumber size')
      .sort({ createdAt: -1 });

      const validContracts = contracts.filter(contract => contract.room !== null);

      res.json(validContracts);
  } catch (err) {
    res.status(500).json({ error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÑ‡∏î‡πâ' });
  }
});

// ‚úÖ GET ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î (admin)
router.get('/', authMiddleware, async (req, res) => {
  if (req.user.role !== 'admin') return res.status(403).json({ error: 'Unauthorized' });

  try {
    const contracts = await Contract.find()
      .populate('user', 'firstName lastName email tel')
      .populate('room', 'roomNumber size')
      .sort({ createdAt: -1 });

    res.json(contracts);
  } catch (err) {
    res.status(500).json({ error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÑ‡∏î‡πâ' });
  }
});

// ‚úÖ CANCEL ‡∏™‡∏±‡∏ç‡∏ç‡∏≤ (admin)
router.put('/cancel/:id', authMiddleware, async (req, res) => {
  if (req.user.role !== 'admin') return res.status(403).json({ error: 'Unauthorized' });

  try {
    const updated = await Contract.findByIdAndUpdate(
      req.params.id,
      { status: 'canceled' },
      { new: true }
    );

    // ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏Å‡∏•‡∏±‡∏ö‡πÄ‡∏õ‡πá‡∏ô vacant ‡∏î‡πâ‡∏ß‡∏¢
    await Room.findByIdAndUpdate(updated.room, { status: 'vacant' });

    res.json({ message: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÅ‡∏•‡πâ‡∏ß', contract: updated });
  } catch (err) {
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏™‡∏±‡∏ç‡∏ç‡∏≤' });
  }
});

router.delete('/contracts/cancel-payment/:id', authMiddleware, async (req, res) => {
  try {
    const contract = await Contract.findById(req.params.id);
    if (!contract) return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤' });

    await Room.findByIdAndUpdate(contract.room, { status: 'vacant' });
    await Contract.findByIdAndDelete(req.params.id);

    res.json({ message: '‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÅ‡∏•‡∏∞‡∏Ñ‡∏∑‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡πâ‡∏≠‡∏á‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
  } catch (err) {
    console.error(err);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏™‡∏±‡∏ç‡∏ç‡∏≤' });
  }
});


router.put('/contracts/mark-paid/:id', authMiddleware, async (req, res) => {
  try {
    const updated = await Contract.findByIdAndUpdate(
      req.params.id,
      { paymentStatus: 'paid', paidAt: new Date() },
      { new: true }
    );
    res.json(updated);
  } catch (err) {
    res.status(500).json({ error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ' });
  }
});

// üì§ User upload receipt
router.post('/contracts/upload-receipt/:id', authMiddleware, upload.single('receipt'), async (req, res) => {
  console.log('üßæ FILE:', req.file); // log file
  console.log('üì¶ CONTRACT ID:', req.params.id); // log ID

  try {
    if (!req.file) {
      return res.status(400).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡πÑ‡∏ü‡∏•‡πå‡∏ó‡∏µ‡πà‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î' });
    }

    const filePath = req.file.path;

    const contract = await Contract.findByIdAndUpdate(
      req.params.id,
      {
        receiptImage: filePath,
        paymentStatus: 'pending',
        uploadedAt: new Date()
      },
      { new: true }
    );

    if (!contract) {
      return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡πÉ‡∏ô‡∏£‡∏∞‡∏ö‡∏ö' });
    }

    res.json({ message: '‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à', contract });
  } catch (err) {
    console.error('‚ùå Error uploading receipt:', err);
    res.status(500).json({ error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡πÑ‡∏î‡πâ' });
  }
});


// ‚úÖ Admin verify receipt
router.put('/contracts/verify-receipt/:id', authMiddleware, async (req, res) => {
  if (req.user.role !== 'admin') return res.status(403).json({ error: 'Unauthorized' });

  const { status, adminNote } = req.body;
  if (!['paid', 'rejected'].includes(status)) return res.status(400).json({ error: '‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á' });

  try {
    const updated = await Contract.findByIdAndUpdate(
      req.params.id,
      { paymentStatus: status, adminNote, 
        paidAt: status === 'paid' ? new Date() : null
      },
      
      { new: true }
    );
    res.json({ message: `‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡πÄ‡∏õ‡πá‡∏ô ${status}`, contract: updated });
  } catch (err) {
    res.status(500).json({ error: '‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏≠‡∏±‡∏õ‡πÄ‡∏î‡∏ï‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡πÑ‡∏î‡πâ' });
  }
});

// ‚úÖ DELETE ‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å‡∏£‡∏∞‡∏ö‡∏ö‡∏ñ‡∏≤‡∏ß‡∏£
router.delete('/contracts/:id', authMiddleware, async (req, res) => {
  if (req.user.role !== 'admin') {
    return res.status(403).json({ error: 'Unauthorized' });
  }

  try {
    const deletedContract = await Contract.findByIdAndDelete(req.params.id);

    if (!deletedContract) {
      return res.status(404).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö' });
    }

    res.json({ message: '‡∏•‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
  } catch (err) {
    console.error("‚ùå Error:", err);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤' });
  }
});

// ‚úÖ Admin ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏¥‡∏•‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
router.post('/monthly-payments/create', authMiddleware, async (req, res) => {
  if (req.user.role !== 'admin') 
    return res.status(403).json({ error: 'Unauthorized' });

  const { userId, roomId, month, roomPrice, waterFee, electricityFee } = req.body;
  const totalAmount = roomPrice + waterFee + electricityFee;

  try {
    const payment = new MonthlyPayment({ 
      user: userId, room: roomId, month, roomPrice, waterFee, electricityFee, totalAmount 
    });
    await payment.save();
    res.status(201).json(payment);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// ‚úÖ Admin ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î
router.get('/monthly-payments', authMiddleware, async (req, res) => {
  if (req.user.role !== 'admin') 
    return res.status(403).json({ error: 'Unauthorized' });

  try {
    const payments = await MonthlyPayment.find()
      .populate('user', 'firstName lastName email tel')
      .populate('room', 'roomNumber size')
      .sort({ createdAt: -1 });

    res.json(payments);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// ‚úÖ Admin ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
router.put('/monthly-payments/confirm/:id', authMiddleware, async (req, res) => {
  if (req.user.role !== 'admin') 
    return res.status(403).json({ error: 'Unauthorized' });

  try {
    const payment = await MonthlyPayment.findByIdAndUpdate(
      req.params.id,
      { paymentStatus: 'confirmed', paidAt: new Date() },
      { new: true }
    );

    res.json(payment);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// ‚úÖ Admin ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÉ‡∏´‡πâ User
router.put('/monthly-payments/message/:id', authMiddleware, async (req, res) => {
  if (req.user.role !== 'admin') 
    return res.status(403).json({ error: 'Unauthorized' });

  try {
    const { adminMessage } = req.body;
    const payment = await MonthlyPayment.findByIdAndUpdate(
      req.params.id,
      { adminMessage},
      { new: true }
    );

    res.json(payment);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// -----------------------------------------

// ‚úÖ User ‡∏î‡∏∂‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏ï‡∏±‡∏ß‡πÄ‡∏≠‡∏á
router.get('/monthly-payments/me', authMiddleware, async (req, res) => {
  try {
    const payments = await MonthlyPayment.find({ user: req.user.userId })
      .populate('room', 'roomNumber size')
      .sort({ createdAt: -1 });

    res.json(payments);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});

// ‚úÖ User ‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
router.post('/monthly-payments/upload-receipt/:id', authMiddleware, upload.single('receipt'), async (req, res) => {
  if (!req.file) return res.status(400).json({ error: '‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏≠‡∏±‡∏õ‡πÇ‡∏´‡∏•‡∏î‡πÑ‡∏ü‡∏•‡πå‡πÉ‡∏ö‡πÄ‡∏™‡∏£‡πá‡∏à' });

  try {
    const payment = await MonthlyPayment.findByIdAndUpdate(
      req.params.id,
      {
        receiptImage: req.file.path,
        paymentStatus: 'pending',
        uploadedAt: new Date()
      },
      { new: true }
    );

    res.json(payment);
  } catch (err) {
    res.status(500).json({ error: err.message });
  }
});
router.post('/monthly-payments/generate', authMiddleware, async (req, res) => {
  if (req.user.role !== 'admin') 
    return res.status(403).json({ error: 'Unauthorized' });

  const { month, waterFee, electricityFee } = req.body;

  try {
    const activeContracts = await Contract.find({ status: 'active' });

    const payments = activeContracts.map(async (contract) => {
      const totalAmount = contract.monthlyRent + waterFee + electricityFee;

      const newPayment = new MonthlyPayment({
        user: contract.user,
        room: contract.room,
        month,
        roomPrice: contract.monthlyRent,
        waterFee,
        electricityFee,
        totalAmount
      });

      return await newPayment.save();
    });

    const results = await Promise.all(payments);
    res.json(results);

  } catch (err) {
    console.error(err);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏¥‡∏•‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô' });
  }
});

router.post('/monthly-payments/generate-single', authMiddleware, async (req, res) => {
  if (req.user.role !== 'admin') 
    return res.status(403).json({ error: 'Unauthorized' });

  const { userId, roomId, month, waterFee, electricityFee } = req.body;

  try {
    const contract = await Contract.findOne({ user: userId, room: roomId, status: 'active' });

    if (!contract) {
      return res.status(400).json({ error: '‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏™‡∏±‡∏ç‡∏ç‡∏≤ active ‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ' });
    }

    const totalAmount = contract.monthlyRent + waterFee + electricityFee;

    const payment = new MonthlyPayment({
      user: userId,
      room: roomId,
      month,
      roomPrice: contract.monthlyRent,
      waterFee,
      electricityFee,
      totalAmount
    });

    await payment.save();
    res.json(payment);

  } catch (err) {
    console.error(err);
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î' });
  }
});

// DELETE ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ö‡∏¥‡∏•‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô
router.delete('/monthly-payments/:id', authMiddleware, async (req, res) => {
  if (req.user.role !== 'admin') return res.status(403).json({ error: 'Unauthorized' });

  try {
    console.log('üóëÔ∏è ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£:', req.params.id);

    await MonthlyPayment.findByIdAndDelete(req.params.id);
    res.json({ message: '‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à' });
  } catch (err) {
    res.status(500).json({ error: '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£' });
  }
});



module.exports = router;
