import React, { useState, useEffect } from 'react';
import axios from 'axios';
import DatePicker from 'react-datepicker';
import { format } from 'date-fns';
import 'react-datepicker/dist/react-datepicker.css';

const sizePriceMap = {
  M: "7,000/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
  L: "7,500/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô",
  XL: "8,000/‡πÄ‡∏î‡∏∑‡∏≠‡∏ô"
};

const RoomManage = () => {
  const [rooms, setRooms] = useState([]);
  const [floor, setFloor] = useState('01');
  const [roomIndex, setRoomIndex] = useState('01');
  const [size, setSize] = useState('M');
  const [selectedDate, setSelectedDate] = useState(null);
  const [amenities, setAmenities] = useState('');
  const [token, setToken] = useState(localStorage.getItem('token'));

  const generatedRoomNumber = `${floor}${roomIndex}`;

  const fetchRooms = async () => {
    try {
      const res = await axios.get('http://localhost:4000/rooms', {
        headers: { Authorization: `Bearer ${token}` },
      });
      setRooms(res.data);
    } catch (err) {
      console.error('‡πÇ‡∏´‡∏•‡∏î‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à:', err);
    }
  };

  const addRoom = async () => {
    const roomNumber = generatedRoomNumber;

    if (!roomNumber || !selectedDate) return alert('‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö');

    // ‚úÖ ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô‡∏´‡πâ‡∏≠‡∏á‡∏ã‡πâ‡∏≥
    if (rooms.find((r) => r.roomNumber === roomNumber)) {
      return alert(`‚ùå ‡∏´‡πâ‡∏≠‡∏á ${roomNumber} ‡∏°‡∏µ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß`);
    }

    try {
      await axios.post(
        'http://localhost:4000/rooms/add',
        {
          roomNumber,
          size,
          moveInDate: format(selectedDate, 'd MMMM yyyy'),
          amenities: amenities.split(',').map(a => a.trim())
        },
        { headers: { Authorization: `Bearer ${token}` } }
      );

      // reset
      setSelectedDate(null);
      setAmenities('');
      fetchRooms();
    } catch (err) {
      alert(err.response?.data?.error || '‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î');
    }
  };

  const toggleStatus = async (id, currentStatus) => {
    const newStatus = currentStatus === 'vacant' ? 'occupied' : 'vacant';
    try {
      await axios.put(`http://localhost:4000/rooms/status/${id}`, {
        status: newStatus
      }, {
        headers: { Authorization: `Bearer ${token}` }
      });
      fetchRooms();
    } catch (err) {
      alert('‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    }
  };

  const deleteRoom = async (roomNumber) => {
    if (!window.confirm(`‡∏•‡∏ö‡∏´‡πâ‡∏≠‡∏á ${roomNumber}?`)) return;
    try {
      await axios.delete(`http://localhost:4000/rooms/${roomNumber}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      fetchRooms();
    } catch (err) {
      alert('‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    }
  };

  useEffect(() => {
    fetchRooms();
  }, []);

  return (
    <div className="p-6">
      <h2 className="text-2xl font-bold mb-4">üìã ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å (Admin)</h2>

      {/* ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡πâ‡∏≠‡∏á */}
      <div className="bg-white p-4 rounded-lg shadow mb-6">
        <h3 className="text-lg font-semibold mb-2">‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡πâ‡∏≠‡∏á‡πÉ‡∏´‡∏°‡πà</h3>

        {/* ‚úÖ ‡πÅ‡∏™‡∏î‡∏á‡∏£‡∏´‡∏±‡∏™‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏° */}
        <p className="text-sm text-gray-600 mb-2">
          üè† ‡∏£‡∏´‡∏±‡∏™‡∏´‡πâ‡∏≠‡∏á‡∏ó‡∏µ‡πà‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏à‡∏∞‡πÄ‡∏û‡∏¥‡πà‡∏°: <strong>{generatedRoomNumber}</strong>
        </p>

        <div className="grid grid-cols-1 sm:grid-cols-4 gap-4 mb-3">
          <select
            className="border p-2 rounded"
            value={floor}
            onChange={(e) => setFloor(e.target.value)}
          >
            {Array.from({ length: 10 }, (_, i) => {
              const fl = String(i + 1).padStart(2, '0');
              return <option key={fl} value={fl}>‡∏ä‡∏±‡πâ‡∏ô {fl}</option>;
            })}
          </select>

          <select
            className="border p-2 rounded"
            value={roomIndex}
            onChange={(e) => setRoomIndex(e.target.value)}
          >
            {Array.from({ length: 10 }, (_, i) => {
              const r = String(i + 1).padStart(2, '0');
              return <option key={r} value={r}>‡∏´‡πâ‡∏≠‡∏á {r}</option>;
            })}
          </select>

          <select
            className="border p-2 rounded"
            value={size}
            onChange={(e) => setSize(e.target.value)}
          >
            <option value="M">M (7,000‡∏ø)</option>
            <option value="L">L (7,500‡∏ø)</option>
            <option value="XL">XL (8,000‡∏ø)</option>
          </select>

          <DatePicker
            selected={selectedDate}
            onChange={(date) => setSelectedDate(date)}
            dateFormat="dd MMMM yyyy"
            placeholderText="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏±‡∏ô‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà"
            className="border p-2 rounded w-full"
          />
        </div>

        <textarea
          className="border p-2 rounded w-full mb-3"
          placeholder="‡∏™‡∏¥‡πà‡∏á‡∏≠‡∏≥‡∏ô‡∏ß‡∏¢‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏î‡∏ß‡∏Å (‡∏Ñ‡∏±‡πà‡∏ô‡∏î‡πâ‡∏ß‡∏¢ ,)"
          value={amenities}
          onChange={(e) => setAmenities(e.target.value)}
        />
        <button
          onClick={addRoom}
          className="bg-blue-600 text-white px-4 py-2 rounded hover:bg-blue-700"
        >
          ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏´‡πâ‡∏≠‡∏á
        </button>
      </div>

      {/* ‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏´‡πâ‡∏≠‡∏á */}
      <div className="grid gap-4">
        {rooms.map((room) => (
          <div key={room._id} className="border p-4 rounded-lg bg-white shadow flex justify-between items-center">
            <div>
              <h4 className="font-semibold text-lg">‡∏´‡πâ‡∏≠‡∏á #{room.roomNumber}</h4>
              <p>‡∏Ç‡∏ô‡∏≤‡∏î: {room.size} | ‡∏£‡∏≤‡∏Ñ‡∏≤: {room.price}</p>
              <p>‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: <span className={
                room.status === 'vacant' ? 'text-green-500' : 'text-red-500'
              }>
                {room.status === 'vacant' ? '‡∏ß‡πà‡∏≤‡∏á' : '‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á'}
              </span></p>
              <p>‡πÄ‡∏Ç‡πâ‡∏≤‡∏≠‡∏¢‡∏π‡πà‡πÑ‡∏î‡πâ: {room.moveInDate}</p>
              <ul className="list-disc pl-5 text-sm mt-1 text-gray-700">
                {room.amenities?.map((a, i) => <li key={i}>{a}</li>)}
              </ul>

              <button
                className="mt-2 bg-yellow-500 text-white px-3 py-1 rounded hover:bg-yellow-600 text-sm"
                onClick={() => toggleStatus(room._id, room.status)}
              >
                ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡πÄ‡∏õ‡πá‡∏ô: {room.status === 'vacant' ? '‡πÑ‡∏°‡πà‡∏ß‡πà‡∏≤‡∏á' : '‡∏ß‡πà‡∏≤‡∏á'}
              </button>
            </div>

            <button
              className="bg-red-500 text-white px-3 py-1 rounded hover:bg-red-600 h-fit"
              onClick={() => deleteRoom(room.roomNumber)}
            >
              ‡∏•‡∏ö
            </button>
          </div>
        ))}
      </div>
    </div>
  );
};

export default RoomManage;
