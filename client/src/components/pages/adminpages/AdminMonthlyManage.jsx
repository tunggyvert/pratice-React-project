import React, { useEffect, useState } from 'react';
import axios from 'axios';
import { toast } from 'react-toastify';
import DatePicker, { registerLocale } from 'react-datepicker';
import { format } from 'date-fns';
import th from 'date-fns/locale/th';
import 'react-datepicker/dist/react-datepicker.css';

registerLocale('th', th);

// ‚úÖ ‡∏ä‡πà‡∏≠‡∏á‡∏õ‡πâ‡∏≠‡∏ô‡∏ß‡∏±‡∏ô‡∏ó‡∏µ‡πà custom
const CustomInput = React.forwardRef(({ value, onClick }, ref) => (
  <input
    type="text"
    onClick={onClick}
    ref={ref}
    value={value}
    readOnly
    placeholder="‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‚Äì‡∏õ‡∏µ"
    className="w-full border border-black p-2 rounded text-sm bg-white focus:outline-none focus:ring-2 focus:ring-blue-500"
  />
));

const AdminMonthlyManage = () => {
  const [payments, setPayments] = useState([]);
  const [messages, setMessages] = useState({});
  const [rooms, setRooms] = useState([]);
  const [selectedRoom, setSelectedRoom] = useState('');
  const [month, setMonth] = useState('');
  const [selectedDate, setSelectedDate] = useState(null);
  const [waterFee, setWaterFee] = useState('');
  const [electricityFee, setElectricityFee] = useState('');

  const token = localStorage.getItem('token');

  useEffect(() => {
    fetchPayments();
    fetchRooms();
  }, []);

  const fetchPayments = async () => {
    try {
      const res = await axios.get('http://localhost:4000/monthly-payments', {
        headers: { Authorization: `Bearer ${token}` }
      });
      setPayments(res.data);
    } catch (err) {
      toast.error('‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    }
  };

  const fetchRooms = async () => {
    try {
      const res = await axios.get('http://localhost:4000/', {
        headers: { Authorization: `Bearer ${token}` }
      });
      const paidContracts = res.data.filter(
        c => (c.paymentStatus === 'paid' || c.paymentStatus === 'confirmed') && c.room && c.user
      );
      setRooms(paidContracts);
    } catch (err) {
      toast.error('‡πÇ‡∏´‡∏•‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏´‡πâ‡∏≠‡∏á‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    }
  };

  const formatMonthThai = (monthStr) => {
    const monthsThai = [
      "‡∏°‡∏Å‡∏£‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏∏‡∏°‡∏†‡∏≤‡∏û‡∏±‡∏ô‡∏ò‡πå", "‡∏°‡∏µ‡∏ô‡∏≤‡∏Ñ‡∏°", "‡πÄ‡∏°‡∏©‡∏≤‡∏¢‡∏ô", "‡∏û‡∏§‡∏©‡∏†‡∏≤‡∏Ñ‡∏°", "‡∏°‡∏¥‡∏ñ‡∏∏‡∏ô‡∏≤‡∏¢‡∏ô",
      "‡∏Å‡∏£‡∏Å‡∏é‡∏≤‡∏Ñ‡∏°", "‡∏™‡∏¥‡∏á‡∏´‡∏≤‡∏Ñ‡∏°", "‡∏Å‡∏±‡∏ô‡∏¢‡∏≤‡∏¢‡∏ô", "‡∏ï‡∏∏‡∏•‡∏≤‡∏Ñ‡∏°", "‡∏û‡∏§‡∏®‡∏à‡∏¥‡∏Å‡∏≤‡∏¢‡∏ô", "‡∏ò‡∏±‡∏ô‡∏ß‡∏≤‡∏Ñ‡∏°"
    ];
    if (!monthStr || !monthStr.includes('-')) return '‡πÑ‡∏°‡πà‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏î‡∏∑‡∏≠‡∏ô';
    const [year, month] = monthStr.split('-');
    const m = parseInt(month, 10);
    if (isNaN(m) || m < 1 || m > 12) return '‡πÄ‡∏î‡∏∑‡∏≠‡∏ô‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á';
    return `${monthsThai[m - 1]} ${year}`;
  };

  const handleGenerateSingle = async () => {
    if (!selectedRoom || !month || waterFee < 0 || electricityFee < 0) {
      return toast.warn('‡πÇ‡∏õ‡∏£‡∏î‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
    }

    const [userId, roomId] = selectedRoom.split(',');

    const isDuplicate = payments.some(
      (p) => p.user?._id === userId && p.room?._id === roomId && p.month === month
    );
    if (isDuplicate) {
      return toast.error(`‚ùå ‡∏°‡∏µ‡∏ö‡∏¥‡∏•‡∏Ç‡∏≠‡∏á‡∏´‡πâ‡∏≠‡∏á‡∏ô‡∏µ‡πâ‡πÉ‡∏ô‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ${formatMonthThai(month)} ‡πÅ‡∏•‡πâ‡∏ß`);
    }

    try {
      await axios.post(
        'http://localhost:4000/monthly-payments/generate-single',
        { userId, roomId, month, waterFee, electricityFee },
        { headers: { Authorization: `Bearer ${token}` } }
      );
      toast.success(`‚úÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏¥‡∏•‡πÄ‡∏î‡∏∑‡∏≠‡∏ô ${formatMonthThai(month)} ‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!`);
      setMonth('');
      setSelectedDate(null);
      setWaterFee(0);
      setElectricityFee(0);
      setSelectedRoom('');
      fetchPayments();
    } catch (err) {
      toast.error('‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏¥‡∏•');
    }
  };

  const confirmPayment = async (id) => {
    try {
      await axios.put(`http://localhost:4000/monthly-payments/confirm/${id}`, {}, {
        headers: { Authorization: `Bearer ${token}` }
      });
      toast.success('‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      fetchPayments();
    } catch (err) {
      toast.error('‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    }
  };

  const deletePayment = async (id) => {
    if (!window.confirm("‡∏Ñ‡∏∏‡∏ì‡πÅ‡∏ô‡πà‡πÉ‡∏à‡∏ß‡πà‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ?")) return;
    try {
      await axios.delete(`http://localhost:4000/monthly-payments/${id}`, {
        headers: { Authorization: `Bearer ${token}` },
      });
      toast.success('üóëÔ∏è ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
      fetchPayments();
    } catch (err) {
      toast.error('‚ùå ‡∏•‡∏ö‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    }
  };

  const sendMessage = async (id) => {
    const message = messages[id];
    if (!message) return toast.warn('‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÉ‡∏™‡πà‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Å‡πà‡∏≠‡∏ô');

    try {
      await axios.put(`http://localhost:4000/monthly-payments/message/${id}`, {
        adminMessage: message,
      }, {
        headers: { Authorization: `Bearer ${token}` }
      });
      toast.success('üì§ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡πÅ‡∏•‡πâ‡∏ß');
      setMessages(prev => ({ ...prev, [id]: '' }));
      fetchPayments();
    } catch (err) {
      toast.error('‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÑ‡∏°‡πà‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à');
    }
  };

  return (
    <div className="max-w-5xl mx-auto p-6">
      <h2 className="text-2xl font-bold mb-4">üõ†Ô∏è ‡∏à‡∏±‡∏î‡∏Å‡∏≤‡∏£‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô</h2>

      <div className="bg-indigo-100 p-4 rounded-lg shadow mb-6">
        <h3 className="text-xl font-semibold mb-2">üìÖ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏¥‡∏•‡∏£‡∏≤‡∏¢‡πÄ‡∏î‡∏∑‡∏≠‡∏ô (‡∏£‡∏≤‡∏¢‡∏´‡πâ‡∏≠‡∏á)</h3>

        <div className="grid grid-cols-1 sm:grid-cols-2 gap-4 mb-4">
          <select
            value={selectedRoom}
            onChange={(e) => setSelectedRoom(e.target.value)}
            className="w-full border border-black p-2 rounded text-sm bg-white"
          >
            <option value="">‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏´‡πâ‡∏≠‡∏á‡∏û‡∏±‡∏Å</option>
            {rooms.map(r => (
              r.room && r.user && (
                <option key={r._id} value={`${r.user._id},${r.room._id}`}>
                  ‡∏´‡πâ‡∏≠‡∏á {r.room.roomNumber} - {r.user.firstName} {r.user.lastName}
                </option>
              )
            ))}
          </select>

          {/* ‚úÖ DatePicker UI ‡∏ï‡∏£‡∏á‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡πÑ‡∏°‡πà‡πÄ‡∏û‡∏µ‡πâ‡∏¢‡∏ô */}
          <div className="w-full relative z-10">
            <DatePicker
              locale="th"
              selected={selectedDate}
              onChange={(date) => {
                setSelectedDate(date);
                setMonth(format(date, 'yyyy-MM'));
              }}
              dateFormat="MMMM yyyy"
              showMonthYearPicker
              popperPlacement="bottom-start"
              popperModifiers={[{ name: 'offset', options: { offset: [0, 6] } }]}
              customInput={<CustomInput />}
            />
          </div>

          <input
            type="number"
            placeholder="‡∏Ñ‡πà‡∏≤‡∏ô‡πâ‡∏≥ (‡∏ö‡∏≤‡∏ó)"
            value={waterFee}
            onChange={(e) => setWaterFee(Number(e.target.value))}
            className="w-full border border-black p-2 rounded text-sm bg-white"
          />

          <input
            type="number"
            placeholder="‡∏Ñ‡πà‡∏≤‡πÑ‡∏ü (‡∏ö‡∏≤‡∏ó)"
            value={electricityFee}
            onChange={(e) => setElectricityFee(Number(e.target.value))}
            className="w-full border border-black p-2 rounded text-sm bg-white"
          />
        </div>

        <button
          onClick={handleGenerateSingle}
          className="bg-blue-600 hover:bg-blue-700 text-white px-4 py-2 rounded"
        >
          üöÄ ‡∏™‡∏£‡πâ‡∏≤‡∏á‡∏ö‡∏¥‡∏•‡∏£‡∏≤‡∏¢‡∏´‡πâ‡∏≠‡∏á
        </button>
      </div>

      {payments.map(payment => (
        <div key={payment._id} className="bg-white shadow-md rounded-lg p-4 mb-4">
          <p>üë§ {payment.user?.firstName} {payment.user?.lastName}</p>
          <p>üè† ‡∏´‡πâ‡∏≠‡∏á {payment.room?.roomNumber}</p>
          <p>üìÖ ‡πÄ‡∏î‡∏∑‡∏≠‡∏ô: {formatMonthThai(payment.month)}</p>
          <p>‡∏¢‡∏≠‡∏î‡∏£‡∏ß‡∏°: {payment.totalAmount.toLocaleString()} ‡∏ö‡∏≤‡∏ó</p>
          <p className={`font-semibold ${payment.paymentStatus === 'confirmed' ? 'text-green-600' : 'text-red-500'}`}>
            ‡∏™‡∏ñ‡∏≤‡∏ô‡∏∞: {payment.paymentStatus}
          </p>

          {payment.receiptImage && (
            <img src={`http://localhost:4000/${payment.receiptImage}`} className="w-48 mt-2 rounded" alt="receipt" />
          )}

          <div className="flex flex-col sm:flex-row gap-2 mt-3">
            {payment.paymentStatus === 'pending' && (
              <button
                className="bg-green-500 hover:bg-green-600 text-white px-4 py-2 rounded"
                onClick={() => confirmPayment(payment._id)}
              >
                ‚úÖ ‡∏¢‡∏∑‡∏ô‡∏¢‡∏±‡∏ô‡∏Å‡∏≤‡∏£‡∏ä‡∏≥‡∏£‡∏∞‡πÄ‡∏á‡∏¥‡∏ô
              </button>
            )}

            <button
              className="bg-red-500 hover:bg-red-600 text-white px-4 py-2 rounded"
              onClick={() => deletePayment(payment._id)}
            >
              üóëÔ∏è ‡∏•‡∏ö‡∏£‡∏≤‡∏¢‡∏Å‡∏≤‡∏£‡∏ô‡∏µ‡πâ
            </button>
          </div>

          <div className="mt-3">
            <input
              type="text"
              className="border p-2 rounded w-full"
              placeholder="‡∏û‡∏¥‡∏°‡∏û‡πå‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô‡∏ú‡∏π‡πâ‡πÄ‡∏ä‡πà‡∏≤..."
              value={messages[payment._id] || ''}
              onChange={(e) => setMessages(prev => ({ ...prev, [payment._id]: e.target.value }))}
            />
            <button
              className="bg-yellow-500 hover:bg-yellow-600 text-white px-4 py-2 rounded mt-2"
              onClick={() => sendMessage(payment._id)}
            >
              üì§ ‡∏™‡πà‡∏á‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°‡πÄ‡∏ï‡∏∑‡∏≠‡∏ô
            </button>
          </div>
        </div>
      ))}
    </div>
  );
};

export default AdminMonthlyManage;
